1)
> db.createCollection("aluno", {
...   validator: {
...     $jsonSchema: {
...        bsonType: "object",
...        required: ["nome"],
...        properties: {
...           nome: { bsonType: "string", description: "deve ser uma string e obrigatorio" }
...        }
...     }
...   }
... });
{
        "ok" : 0,
        "errmsg" : "a collection 'academico_trab.aluno' already exists",
        "code" : 48,
        "codeName" : "NamespaceExists"
}
>
> db.createCollection("disciplina", {
...   validator: {
...     $jsonSchema: {
...        bsonType: "object",
...        required: ["nome"],
...        properties: {
...           nome: { bsonType: "string", description: "deve ser uma string e obrigatorio" },
...   cargaHoraria : { bsonType: "int", minimum: 0, description: "deve ser um inteiro maior igual a 0" }
...        }
...     }
...   }
... });
{
        "ok" : 0,
        "errmsg" : "a collection 'academico_trab.disciplina' already exists",
        "code" : 48,
        "codeName" : "NamespaceExists"
}
>
> db.createCollection("professor", {
...   validator: {
...     $jsonSchema: {
...        bsonType: "object",
...        required: ["nome", "titulacao"],
...        properties: {
...           nome: { bsonType: "string", description: "deve ser uma string e obrigatorio" },
...           titulacao: { bsonType: "string", description: "deve ser uma string e obrigatorio" },
...        }
...     }
...   }
... });






2.b)

> db.aluno.insert({id: 1})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
 
2.c)

> db.aluno.insert({_id: 1, "nome" : "Jose"})
WriteResult({ "nInserted" : 1 })
> db.aluno.find()
{ "_id" : 1, "nome" : "Jose" }     

> db.aluno.insert({_id: 2, "nome" : "MARIA"})
WriteResult({ "nInserted" : 1 })
> db.aluno.find()
{ "_id" : 1, "nome" : "Jose" }
{ "_id" : 2, "nome" : "MARIA" }

>  db.aluno.insert({_id: 3, "nome" : "BRUNO"})
WriteResult({ "nInserted" : 1 })
> db.aluno.find()
{ "_id" : 1, "nome" : "Jose" }
{ "_id" : 2, "nome" : "MARIA" }
{ "_id" : 3, "nome" : "BRUNO" }

>  db.aluno.insert({_id: 4, "nome" : "CARLA"})
WriteResult({ "nInserted" : 1 })
> db.aluno.find()
{ "_id" : 1, "nome" : "Jose" }
{ "_id" : 2, "nome" : "MARIA" }
{ "_id" : 3, "nome" : "BRUNO" }
{ "_id" : 4, "nome" : "CARLA" }

>  db.aluno.insert({_id: 5, "nome" : "PEDRO"})
WriteResult({ "nInserted" : 1 })
> db.aluno.find()
{ "_id" : 1, "nome" : "Jose" }
{ "_id" : 2, "nome" : "MARIA" }
{ "_id" : 3, "nome" : "BRUNO" }
{ "_id" : 4, "nome" : "CARLA" }
{ "_id" : 5, "nome" : "PEDRO" }

2.d)

> db.disciplina.insert({_id: 1, "nome" :  "BANCO DE DADOS I", "cargaHoraria" : -1})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

2.e)  ( TENTEI DE TODAS AS FORMAS, MESMO COPIANDO OS OUTROS DEU ERRO)

>  db.disciplina.insert({_id: 1, nome:  "BANCO DE DADOS I",  cargaHoraria : 60})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.disciplina.insert({_id: 2, "nome":  "BANCO DE DADOS II",  "cargaHoraria" : 60})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

2.f) 

> db.professor.insert({_id: 1, "nome" : "LETICIA"})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.professor.insert({_id: 2, "nome" : "JOSE REGINALDO"})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

2.g) 

> db.turma.insert({_id: 1, "numPeriodo": 20192})
WriteResult({ "nInserted" : 1 })
> db.turma.find()
{ "_id" : 1, "numPeriodo" : 20192 }

2.h)

>  db.turma.insert({_id: 1, "numPeriodo": 20201})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 11000,
                "errmsg" : "E11000 duplicate key error collection: academico_trab.turma index: _id_ dup key: { _id: 1.0 }"
        }
})

2.i)

>   db.turma.insert({_id: 2, "numPeriodo": 20201, "idProfessor": 3})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

2.j)

> db.turma.insert({"_id": 3, "numPeriodo": 20201, "idProfessor": 1, "idDisciplina": 1})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

>  db.turma.insert({_id: 4, numPeriodo: 20202, idProfessor: 2, idDisciplina: 2})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

2.k)

> db.historico.insert({_id: 1, idTurma: 1, id_aluno: 1})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 2, idTurma: 1, idAluno: 2})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 3, idTurma: 1, idAluno: 3})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 4, idTurma: 1, idAluno: 4})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 5, idTurma: 3, idAluno: 1})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 5, idTurma: 3, idAluno: 1})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 5, idTurma: 3, idAluno: 1})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 6, idTurma: 3, idAluno: 2})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 7, idTurma: 4, idAluno: 3})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

> db.historico.insert({_id: 8, idTurma: 4, idAluno: 4})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

2.l)

>  db.aluno.update({"_id" : 1}, {$set : {nome: "JOAO"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>  db.aluno.find()
{ "_id" : 1, "nome" : "JOAO" }
{ "_id" : 2, "nome" : "MARIA" }
{ "_id" : 3, "nome" : "BRUNO" }
{ "_id" : 4, "nome" : "CARLA" }
{ "_id" : 5, "nome" : "PEDRO" }

2.m)

> db.disciplina.update({"nome" : "BANCO DE DADOS I"}, {$set : {_id: 3}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })

2.n)

> db.historico.aggregate([ { $match: { idDisciplina: “ADS025” }}, { $group: { _id: “numPeriodo”, media_turma: 5 }}} ])
2020-06-18T17:21:24.382-0300 E  QUERY    [js] uncaught exception: SyntaxError: illegal character :
@(shell):1:51
>

2.o)

> db.aluno.remove({ "_id" : 5, "nome" : "PEDRO"})
WriteResult({ "nRemoved" : 1 })
> db.aluno.find()
{ "_id" : 1, "nome" : "JOAO" }
{ "_id" : 2, "nome" : "MARIA" }
{ "_id" : 3, "nome" : "BRUNO" }
{ "_id" : 4, "nome" : "CARLA" }


2.p)

> db.disciplina.remove({  _id: 1, "nome" : "BANCO DE DADOS II", "cargaHoraria": 60})
WriteResult({ "nRemoved" : 0 })

2.q)

>  db.professor.remove({ _id: 2, "nome": "JOSE REGINALDO"})
WriteResult({ "nRemoved" : 0 })





